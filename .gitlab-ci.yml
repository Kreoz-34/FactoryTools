image: lukasheinrich/recast_cvmfs_assisted


before_script:
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  #- echo "${SSH_PRIVATE_KEY}" > test.key; chmod 600 test.key


  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'


stages:
  - setup
  - build
  - test

setup:
  stage: setup
  tags:
    - cvmfs
  script:
    - bash
    - pwd;ls
    - rm -rf testArea || echo ignore; mkdir testArea; cd testArea;
    - ln -s ../../FactoryTools FactoryTools;
    - pwd; ls;
    - source FactoryTools/util/setup_CI.sh
    - more ~/.ssh/config
    - grep "#!!" FactoryTools/README.md > INSTALL
    - more INSTALL
    - source INSTALL
    # - rc find_packages
    # - rc compile
  artifacts:
    paths:
    - testArea/

compile:
  stage: build
  tags:
    - cvmfs
  script:
    - bash
    - pwd;ls
    - cd testArea/
    - source FactoryTools/util/setup_CI.sh
    - rc find_packages
    - rc compile
  artifacts:
    paths:
    - testArea/

download:
  stage: build
  tags:
    - cvmfs
  script:
    - bash
    - pwd;ls
    - source util/setup_CI.sh
    - rm -rf samples; mkdir samples; cd samples;
    - scp -r atlzerol@lxplus.cern.ch:/afs/cern.ch/work/r/rsmith/public/factoryToolsSample/ factoryToolsSample
  artifacts:
    paths:
    - samples/

test:
  stage: test
  tags:
    - cvmfs
  script:
    - bash
    - pwd;ls
    - cd testArea/
    - source FactoryTools/util/setup_CI.sh
    - rc find_packages
    - rc compile
    - python FactoryTools/util/run_zl.py  --doOverwrite --nevents 10 --verbosity debug --inputDS ../samples/factoryToolsSample/


testValgrind:
  stage: test
  tags:
    - cvmfs
  script:
    - bash
    - pwd;ls
    - cd testArea/
    - source FactoryTools/util/setup_CI.sh
    - rc find_packages
    - rc compile
    - wget http://valgrind.org/downloads/valgrind-3.9.0.tar.bz2
    - tar xvjf valgrind-3.9.0.tar.bz2
    - cd valgrind-3.9.0
    - ./configure --prefix=$HOME/valgrind
    - make
    - make install
    - ~/valgrind/bin/valgrind -q  --tool=memcheck --leak-check=yes python FactoryTools/util/run_zl.py  --submitDir valgrindTest --doOverwrite --nevents -1 --inputDS ../samples/factoryToolsSample/


# compile:
#   stage: build
#   tags:
#     - cvmfs
#   script:
#     - bash
#     - cd testArea
#     - source FactoryTools/util/setup_CI.sh
#     - source rcSetup.sh
#     - rc find_packages
#     - rc compile

# runmctest:
#   stage: test
#   tags:
#     - cvmfs
#   script:
#     - bash
#     - cd testArea
#     - source FactoryTools/util/setup_CI.sh
#     - source rcSetup.sh
#     - rc find_packages
#     - rc compile
#     - python FactoryTools/util/run_zl.py  --doOverwrite --nevents 10 --verbosity debug --inputDS factoryToolsSample/


# runmcvalgrind:
#   stage: test
#   tags:
#     - cvmfs
#   script:
#     - bash
#     - cd testArea
#     - source FactoryTools/util/setup_CI.sh
#     - source rcSetup.sh
#     - rc find_packages
#     - rc compile
#     - valgrind -q python FactoryTools/util/run_zl.py  --submitDir valgrindTest --doOverwrite --nevents -1 --inputDS factoryToolsSample/
